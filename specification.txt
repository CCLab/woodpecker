Woodpecker library short feature specification.I. setTemplateEngine(engineName)Choose template engine responsible for generating html code for each cell in a table.If you don't call this function, default engine will be used.II. setTemplate(templateName)Choose name of predefined which will be used to generate html code for each cell in a table.If you don't call this function, default template will be used.III. drawTable(data, dataType, inheritanceName)Generate html code of table(optionally with toolbar) presenting data of dataType typethat says in which form data is passed: list or tree.inheritanceName is name of parameter describing inheritance between data rows.For list form it is ignored, for tree it is a name of an attribute whichcontains list of children of a row,e.g.:1) data in list form:toDraw = [  ['fruit', 100, 30, undefined],  ['apple', 50, 10, 0],  ['pear', 50, 20, 0],  ['vegetable', 50, 20, undefined],  ['carrot', 10, 10, 3],  ['salad', 40, 10, 3]]drawTable(toDraw, 'list')  2) data in tree form:toDraw = [  {    name: 'fruit', val1: 100, val2: 30,    children: [      { name: apple, val1: 50, val2: 10, children: [] },      { name: pear, val1: 50, val2: 20, children: [] }    ]  },  {    name: 'vegetable', val1: 50, val2: 20,    children: [      { name: 'carrot', val1: 10, val2: 10, children: [] },      { name: 'salad', val2: 40, val1: 10, children: [] }    ]  }]drawTable(toDraw, 'tree', 'children')IV. setStyle(styleDefinition)Set style defining appearance of the table.styleDefinition describes style which should be used to create next table.Style can be defined in two ways:1) overriding style parameters used by template:template generates html code:<td class="cellClass" style="background-color: white; ..." id="1">  ...</td>setStyle('cellClass', { background-color: 'blue' })will set background-color attribute to blue in elements which class is "cellClass":<td class="cellClass" style="background-color: blue; ..." id="1">  ...</td>2) overriding name of class:setStyle('cellClass', 'myCellClass')new template will look like this:<td class="myCellClass" id="1">  ...</td>Notice that overriding name of class erases style attributes. 'myCellClass' shouldbe name of a existing css class.Calling setStyle more than once for the same class will remove effect caused by the previous call.setStyle('cellClass', {'background-color': 'blue'})  // ignoredsetStyle('cellClass', 'myCellClass')               // ignoredsetStyle('cellClass', {'background-color': 'green'})V. setToolbarOptions(toolbarOptions)Set toolbar options describing what functionality it will provide.Parameter toolbarOptions defines which kind of those features you want to have.If toolbarOptions is undefined, toolbar with all features will be created,otherwise it will contain only features described in this parameter.toolbarOptions = [    {'feature': featureName, options},    ...]example:setToolbarOptions(); // I want full-featured toolbarsetToolbarOptions( [{'feature': 'sort', {'simple': true, 'numbersOnly': true}] ); // I only want to sort data by integer fieldsin simple modesetToolbarOptions( [{'feature': 'filter', {'simple': true}}, {'feature': 'sort', {'simple': false}}] // I want to be ableto filter data in simple mode and sort in complex modeNew created toolbar will contain only style that was set in the last call.Calling this function when toolbar exist, will not change it.You have to call drawTable to do this.VI. customize(eventType, toggle, callback)Customize function turns on/off event handlers for a new table. A brand new tabledoes not provide any event handlers. eventType is a name of event that you want to handle(for example, clicking a row), toggle specifies if you want to turn on or off event handler,callback is a function that will be called when the event occurs, id of row is passed to that function.If toggle is "off", then callback argument will be ignored.example:function blackNWhite(id) {    var elem = $('id'), // jQuery selector        parts = id.split('-'),        lastPart = parseInt(parts[parts.length - 1]);    if (lastPart % 2) {        elem.attr('background-color', 'black');    } else {        elem.attr('background-color', 'white');    }}customize("click", "on", blackNWhite);Full example code showing how to use woodpecker library:// fast way to generate table, without configuring itvar fastCreator = new Woodpecker();fastCreator.drawTable(data, 'tree', 'children');// more complex example containing simple configurationdata = toDraw;// ...var tableCreator = new Woodpecker();tableCreator.setTemplateEngine('ejs');// I want to use standard template, no setTemplate function calltableCreator.setStyle('cellClass', 'tweakedCellClass'); // tweakedCellClass is in one of .css filestableCreator.setToolbarOptions([{'feature': 'sort', {'simple': true}]);tableCreator.drawTable(data, 'tree', 'children');tableCreator.customize('click', 'on', clickHandler);tableCreator.customize('hover', 'on', hoverHandler);